(function() {
    var type_impls = Object.fromEntries([["hlsl_lang_types",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CU%3E-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CU%3E-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;U, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;U&gt; for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;U</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<U>","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-Deref-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;<a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a> + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;__D&gt;(\n    __deserializer: __D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;, &lt;__D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-Display-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CT%3E-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(inner: T) -&gt; <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<T>","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-Hash-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"hlsl_lang_types/ast/struct.Node.html#tymethod.new\" class=\"fn\">new</a>(content: T, span: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"hlsl_lang_types/ast/struct.NodeSpan.html\" title=\"struct hlsl_lang_types::ast::NodeSpan\">NodeSpan</a>&gt;) -&gt; <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new syntax node with span information</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"hlsl_lang_types/ast/struct.Node.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Return the wrapped syntax node, discarding the span information</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"hlsl_lang_types/ast/struct.Node.html#tymethod.map\" class=\"fn\">map</a>&lt;U&gt;(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U) -&gt; <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a>,</div></h4></section></summary><div class=\"docblock\"><p>Map this content of this node into a new node</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_spanned\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"hlsl_lang_types/ast/struct.Node.html#tymethod.map_spanned\" class=\"fn\">map_spanned</a>&lt;U&gt;(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;) -&gt; U) -&gt; <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a>,</div></h4></section></summary><div class=\"docblock\"><p>Map this content of this node into a new node with the same span</p>\n</div></details></div></details>",0,"hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NodeDisplay-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-NodeDisplay-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeDisplay.html\" title=\"trait hlsl_lang_types::ast::NodeDisplay\">NodeDisplay</a> for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: NodeContentDisplay + <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.name\" class=\"method trait-impl\"><a href=\"#method.name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hlsl_lang_types/ast/trait.NodeDisplay.html#tymethod.name\" class=\"fn\">name</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Name of the syntax node’s type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.start\" class=\"method trait-impl\"><a href=\"#method.start\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hlsl_lang_types/ast/trait.NodeDisplay.html#tymethod.start\" class=\"fn\">start</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"hlsl_lang_types/ast/struct.TextSize.html\" title=\"struct hlsl_lang_types::ast::TextSize\">TextSize</a>&gt;</h4></section></summary><div class='docblock'>Starting position of the node</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.end\" class=\"method trait-impl\"><a href=\"#method.end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hlsl_lang_types/ast/trait.NodeDisplay.html#tymethod.end\" class=\"fn\">end</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"hlsl_lang_types/ast/struct.TextSize.html\" title=\"struct hlsl_lang_types::ast::TextSize\">TextSize</a>&gt;</h4></section></summary><div class='docblock'>Ending position of the node</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.source_id\" class=\"method trait-impl\"><a href=\"#method.source_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hlsl_lang_types/ast/trait.NodeDisplay.html#tymethod.source_id\" class=\"fn\">source_id</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"hlsl_lang_types/ast/struct.FileId.html\" title=\"struct hlsl_lang_types::ast::FileId\">FileId</a>&gt;</h4></section></summary><div class='docblock'>Source id of the node</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.display\" class=\"method trait-impl\"><a href=\"#method.display\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hlsl_lang_types/ast/trait.NodeDisplay.html#tymethod.display\" class=\"fn\">display</a>(&amp;self) -&gt; NodeDisplayWrapper&lt;'_, <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Obtain a display wrapper for the current node</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.display_extra\" class=\"method trait-impl\"><a href=\"#method.display_extra\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hlsl_lang_types/ast/trait.NodeDisplay.html#tymethod.display_extra\" class=\"fn\">display_extra</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Display extra information for the node <a href=\"hlsl_lang_types/ast/trait.NodeDisplay.html#tymethod.display_extra\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.display_children\" class=\"method trait-impl\"><a href=\"#method.display_children\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hlsl_lang_types/ast/trait.NodeDisplay.html#tymethod.display_children\" class=\"fn\">display_children</a>(\n    &amp;self,\n    level: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>,\n    f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Display the node’s children <a href=\"hlsl_lang_types/ast/trait.NodeDisplay.html#tymethod.display_children\">Read more</a></div></details></div></details>","NodeDisplay","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-Ord-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1009-1011\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1048-1050\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1074-1076\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialOrd-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1382\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1400\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1418\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1436\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a> + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;__S&gt;(\n    &amp;self,\n    __serializer: __S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<section id=\"impl-Copy-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-Copy-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"],["<section id=\"impl-Eq-for-Node%3CT%3E\" class=\"impl\"><a href=\"#impl-Eq-for-Node%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"hlsl_lang_types/ast/struct.Node.html\" title=\"struct hlsl_lang_types::ast::Node\">Node</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hlsl_lang_types/ast/trait.NodeContent.html\" title=\"trait hlsl_lang_types::ast::NodeContent\">NodeContent</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","hlsl_lang_types::ast::Identifier","hlsl_lang_types::ast::TypeName","hlsl_lang_types::ast::Path","hlsl_lang_types::ast::TypeSpecifierNonArray","hlsl_lang_types::ast::TypeSpecifier","hlsl_lang_types::ast::StructSpecifier","hlsl_lang_types::ast::StructFieldSpecifier","hlsl_lang_types::ast::Semantic","hlsl_lang_types::ast::ArrayedIdentifier","hlsl_lang_types::ast::TypeQualifier","hlsl_lang_types::ast::TypeQualifierSpec","hlsl_lang_types::ast::StorageQualifier","hlsl_lang_types::ast::LayoutQualifier","hlsl_lang_types::ast::LayoutQualifierSpec","hlsl_lang_types::ast::PrecisionQualifier","hlsl_lang_types::ast::InterpolationQualifier","hlsl_lang_types::ast::FullySpecifiedType","hlsl_lang_types::ast::ArraySpecifier","hlsl_lang_types::ast::ArraySpecifierDimension","hlsl_lang_types::ast::Declaration","hlsl_lang_types::ast::Block","hlsl_lang_types::ast::CBuffer","hlsl_lang_types::ast::SamplerStateProperty","hlsl_lang_types::ast::SamplerState","hlsl_lang_types::ast::FunIdentifier","hlsl_lang_types::ast::FunctionPrototype","hlsl_lang_types::ast::FunctionParameterDeclaration","hlsl_lang_types::ast::FunctionParameterDeclarator","hlsl_lang_types::ast::InitDeclaratorList","hlsl_lang_types::ast::SingleDeclaration","hlsl_lang_types::ast::SingleDeclarationNoType","hlsl_lang_types::ast::Initializer","hlsl_lang_types::ast::Expr","hlsl_lang_types::ast::UnaryOp","hlsl_lang_types::ast::BinaryOp","hlsl_lang_types::ast::AssignmentOp","hlsl_lang_types::ast::ExternalDeclaration","hlsl_lang_types::ast::FunctionDefinition","hlsl_lang_types::ast::CompoundStatement","hlsl_lang_types::ast::Statement","hlsl_lang_types::ast::ExprStatement","hlsl_lang_types::ast::SelectionStatement","hlsl_lang_types::ast::Condition","hlsl_lang_types::ast::SelectionRestStatement","hlsl_lang_types::ast::SwitchStatement","hlsl_lang_types::ast::CaseLabel","hlsl_lang_types::ast::IterationStatement","hlsl_lang_types::ast::ForInitStatement","hlsl_lang_types::ast::ForRestStatement","hlsl_lang_types::ast::JumpStatement","hlsl_lang_types::ast::Preprocessor","hlsl_lang_types::ast::PreprocessorDefine","hlsl_lang_types::ast::PreprocessorElseIf","hlsl_lang_types::ast::PreprocessorError","hlsl_lang_types::ast::PreprocessorIf","hlsl_lang_types::ast::PreprocessorIfDef","hlsl_lang_types::ast::PreprocessorIfNDef","hlsl_lang_types::ast::PreprocessorInclude","hlsl_lang_types::ast::PreprocessorLine","hlsl_lang_types::ast::PreprocessorPragma","hlsl_lang_types::ast::PreprocessorUndef","hlsl_lang_types::ast::PreprocessorVersion","hlsl_lang_types::ast::PreprocessorVersionProfile","hlsl_lang_types::ast::PreprocessorExtension","hlsl_lang_types::ast::PreprocessorExtensionName","hlsl_lang_types::ast::PreprocessorExtensionBehavior","hlsl_lang_types::ast::Comment"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[91539]}